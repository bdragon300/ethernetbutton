
bin/Debug/ethernetbutton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000c2a  00000cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  00800068  00800068  00000ce6  2**0
                  ALLOC
  3 .eeprom       00000036  00810000  00810000  00000ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00002958  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000019d1  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005045  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e2       	ldi	r30, 0x2A	; 42
  36:	fc e0       	ldi	r31, 0x0C	; 12
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a8 36       	cpi	r26, 0x68	; 104
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	a8 e6       	ldi	r26, 0x68	; 104
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a4 30       	cpi	r26, 0x04	; 4
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	6f d5       	rcall	.+2782   	; 0xb34 <main>
  56:	e7 c5       	rjmp	.+3022   	; 0xc26 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <TIMER2_COMP_vect>:

uint32_t tick_count;
uint32_t second_count;

ISR(TIMER2_COMP_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	2f 93       	push	r18
  66:	3f 93       	push	r19
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	af 93       	push	r26
  6e:	bf 93       	push	r27
	++ms_count;
  70:	20 91 7a 00 	lds	r18, 0x007A
  74:	30 91 7b 00 	lds	r19, 0x007B
  78:	2f 5f       	subi	r18, 0xFF	; 255
  7a:	3f 4f       	sbci	r19, 0xFF	; 255
  7c:	30 93 7b 00 	sts	0x007B, r19
  80:	20 93 7a 00 	sts	0x007A, r18
	++tick_count;
  84:	80 91 80 00 	lds	r24, 0x0080
  88:	90 91 81 00 	lds	r25, 0x0081
  8c:	a0 91 82 00 	lds	r26, 0x0082
  90:	b0 91 83 00 	lds	r27, 0x0083
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	a1 1d       	adc	r26, r1
  98:	b1 1d       	adc	r27, r1
  9a:	80 93 80 00 	sts	0x0080, r24
  9e:	90 93 81 00 	sts	0x0081, r25
  a2:	a0 93 82 00 	sts	0x0082, r26
  a6:	b0 93 83 00 	sts	0x0083, r27

	if(ms_count == 1000)
  aa:	28 3e       	cpi	r18, 0xE8	; 232
  ac:	33 40       	sbci	r19, 0x03	; 3
  ae:	b9 f4       	brne	.+46     	; 0xde <TIMER2_COMP_vect+0x84>
	{
		++second_count;
  b0:	80 91 7c 00 	lds	r24, 0x007C
  b4:	90 91 7d 00 	lds	r25, 0x007D
  b8:	a0 91 7e 00 	lds	r26, 0x007E
  bc:	b0 91 7f 00 	lds	r27, 0x007F
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	80 93 7c 00 	sts	0x007C, r24
  ca:	90 93 7d 00 	sts	0x007D, r25
  ce:	a0 93 7e 00 	sts	0x007E, r26
  d2:	b0 93 7f 00 	sts	0x007F, r27
		ms_count = 0;
  d6:	10 92 7b 00 	sts	0x007B, r1
  da:	10 92 7a 00 	sts	0x007A, r1
	}
}
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <counter_init>:

void counter_init()
{
	// clk = Fcpu/128, mode = CTC, freq = 1 kHz
	TCCR0A = (1<<WGM01);
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 bf       	out	0x30, r24	; 48
	TCCR0B = (1<<CS01) | (1<<CS00);
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	83 bf       	out	0x33, r24	; 51
	OCR0A = 156;
  fc:	8c e9       	ldi	r24, 0x9C	; 156
  fe:	86 bf       	out	0x36, r24	; 54
	TIMSK |= 1<<OCIE0A;
 100:	89 b7       	in	r24, 0x39	; 57
 102:	81 60       	ori	r24, 0x01	; 1
 104:	89 bf       	out	0x39, r24	; 57
 106:	08 95       	ret

00000108 <enc28j60_rxtx>:
#define enc28j60_select() ENC28J60_SPI_PORT &= ~ENC28J60_SPI_CS
#define enc28j60_release() ENC28J60_SPI_PORT |= ENC28J60_SPI_CS

uint8_t enc28j60_rxtx(uint8_t data)
{
	USIDR = data;
 108:	8f b9       	out	0x0f, r24	; 15
	USISR |= (1<<USIOIF);
 10a:	76 9a       	sbi	0x0e, 6	; 14
	while(!(USISR & (1<<USIOIF)))
 10c:	76 99       	sbic	0x0e, 6	; 14
 10e:	05 c0       	rjmp	.+10     	; 0x11a <enc28j60_rxtx+0x12>
		USICR |= (1<<USITC) | (1<<USICLK) | (1<<USICS1);
 110:	8d b1       	in	r24, 0x0d	; 13
 112:	8b 60       	ori	r24, 0x0B	; 11
 114:	8d b9       	out	0x0d, r24	; 13

uint8_t enc28j60_rxtx(uint8_t data)
{
	USIDR = data;
	USISR |= (1<<USIOIF);
	while(!(USISR & (1<<USIOIF)))
 116:	76 9b       	sbis	0x0e, 6	; 14
 118:	fb cf       	rjmp	.-10     	; 0x110 <enc28j60_rxtx+0x8>
		USICR |= (1<<USITC) | (1<<USICLK) | (1<<USICS1);
	ENC28J60_SPI_PORT &= ~ENC28J60_SPI_SCK;
 11a:	c7 98       	cbi	0x18, 7	; 24
	return USIDR;
 11c:	8f b1       	in	r24, 0x0f	; 15
 11e:	08 95       	ret

00000120 <enc28j60_read_op>:
#define enc28j60_rx() enc28j60_rxtx(0xff)
#define enc28j60_tx(data) enc28j60_rxtx(data)

// Generic SPI read command
uint8_t enc28j60_read_op(uint8_t cmd, uint8_t adr)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	dd 27       	eor	r29, r29
	uint8_t data;

	enc28j60_select();
 12a:	c4 98       	cbi	0x18, 4	; 24
	enc28j60_tx(cmd | (adr & ENC28J60_ADDR_MASK));
 12c:	96 2f       	mov	r25, r22
 12e:	9f 71       	andi	r25, 0x1F	; 31
 130:	89 2b       	or	r24, r25
 132:	69 83       	std	Y+1, r22	; 0x01
 134:	e9 df       	rcall	.-46     	; 0x108 <enc28j60_rxtx>
	if(adr & 0x80) // throw out dummy byte
 136:	69 81       	ldd	r22, Y+1	; 0x01
 138:	67 fd       	sbrc	r22, 7
 13a:	07 c0       	rjmp	.+14     	; 0x14a <enc28j60_read_op+0x2a>
		enc28j60_rx(); // when reading MII/MAC register
	data = enc28j60_rx();
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	e4 df       	rcall	.-56     	; 0x108 <enc28j60_rxtx>
	enc28j60_release();
 140:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret
	uint8_t data;

	enc28j60_select();
	enc28j60_tx(cmd | (adr & ENC28J60_ADDR_MASK));
	if(adr & 0x80) // throw out dummy byte
		enc28j60_rx(); // when reading MII/MAC register
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	dd df       	rcall	.-70     	; 0x108 <enc28j60_rxtx>
	data = enc28j60_rx();
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	db df       	rcall	.-74     	; 0x108 <enc28j60_rxtx>
	enc28j60_release();
 152:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <enc28j60_write_op>:

// Generic SPI write command
void enc28j60_write_op(uint8_t cmd, uint8_t adr, uint8_t data)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	1f 92       	push	r1
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	dd 27       	eor	r29, r29
	enc28j60_select();
 166:	c4 98       	cbi	0x18, 4	; 24
	enc28j60_tx(cmd | (adr & ENC28J60_ADDR_MASK));
 168:	6f 71       	andi	r22, 0x1F	; 31
 16a:	86 2b       	or	r24, r22
 16c:	49 83       	std	Y+1, r20	; 0x01
 16e:	cc df       	rcall	.-104    	; 0x108 <enc28j60_rxtx>
	enc28j60_tx(data);
 170:	49 81       	ldd	r20, Y+1	; 0x01
 172:	84 2f       	mov	r24, r20
 174:	c9 df       	rcall	.-110    	; 0x108 <enc28j60_rxtx>
	enc28j60_release();
 176:	c4 9a       	sbi	0x18, 4	; 24
}
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <enc28j60_set_bank.part.0>:
/*
 * Memory access
 */

// Set register bank
void enc28j60_set_bank(uint8_t adr)
 180:	cf 93       	push	r28
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
	{
		bank = (adr >> 5) & 0x03; //BSEL1|BSEL0=0x03
 182:	c8 2f       	mov	r28, r24
 184:	c2 95       	swap	r28
 186:	c6 95       	lsr	r28
 188:	c3 70       	andi	r28, 0x03	; 3
		if(bank != enc28j60_current_bank)
 18a:	80 91 6a 00 	lds	r24, 0x006A
 18e:	c8 17       	cp	r28, r24
 190:	51 f0       	breq	.+20     	; 0x1a6 <enc28j60_set_bank.part.0+0x26>
		{
			enc28j60_write_op(ENC28J60_SPI_BFC, ECON1, 0x03);
 192:	43 e0       	ldi	r20, 0x03	; 3
 194:	6f e1       	ldi	r22, 0x1F	; 31
 196:	80 ea       	ldi	r24, 0xA0	; 160
 198:	e1 df       	rcall	.-62     	; 0x15c <enc28j60_write_op>
			enc28j60_write_op(ENC28J60_SPI_BFS, ECON1, bank);
 19a:	4c 2f       	mov	r20, r28
 19c:	6f e1       	ldi	r22, 0x1F	; 31
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	dd df       	rcall	.-70     	; 0x15c <enc28j60_write_op>
			enc28j60_current_bank = bank;
 1a2:	c0 93 6a 00 	sts	0x006A, r28
		}
	}
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <enc28j60_soft_reset>:
}

// Initiate software reset
void enc28j60_soft_reset()
{
	enc28j60_select();
 1aa:	c4 98       	cbi	0x18, 4	; 24
	enc28j60_tx(ENC28J60_SPI_SC);
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	ac df       	rcall	.-168    	; 0x108 <enc28j60_rxtx>
	enc28j60_release();
 1b0:	c4 9a       	sbi	0x18, 4	; 24

	enc28j60_current_bank = 0;
 1b2:	10 92 6a 00 	sts	0x006A, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	83 ec       	ldi	r24, 0xC3	; 195
 1b8:	99 e0       	ldi	r25, 0x09	; 9
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <enc28j60_soft_reset+0x10>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <enc28j60_soft_reset+0x16>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <enc28j60_set_bank>:
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 1c4:	28 2f       	mov	r18, r24
 1c6:	2f 71       	andi	r18, 0x1F	; 31
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	2b 31       	cpi	r18, 0x1B	; 27
 1cc:	31 05       	cpc	r19, r1
 1ce:	0c f4       	brge	.+2      	; 0x1d2 <enc28j60_set_bank+0xe>
 1d0:	d7 cf       	rjmp	.-82     	; 0x180 <enc28j60_set_bank.part.0>
 1d2:	08 95       	ret

000001d4 <enc28j60_rcr>:
	}
}

// Read register
uint8_t enc28j60_rcr(uint8_t adr)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	1f 92       	push	r1
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	dd 27       	eor	r29, r29
 1de:	68 2f       	mov	r22, r24
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 1e0:	28 2f       	mov	r18, r24
 1e2:	2f 71       	andi	r18, 0x1F	; 31
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	2b 31       	cpi	r18, 0x1B	; 27
 1e8:	31 05       	cpc	r19, r1
 1ea:	1c f4       	brge	.+6      	; 0x1f2 <enc28j60_rcr+0x1e>
 1ec:	69 83       	std	Y+1, r22	; 0x01
 1ee:	c8 df       	rcall	.-112    	; 0x180 <enc28j60_set_bank.part.0>
 1f0:	69 81       	ldd	r22, Y+1	; 0x01

// Read register
uint8_t enc28j60_rcr(uint8_t adr)
{
	enc28j60_set_bank(adr);
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
}
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28

// Read register
uint8_t enc28j60_rcr(uint8_t adr)
{
	enc28j60_set_bank(adr);
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr);
 1fa:	92 cf       	rjmp	.-220    	; 0x120 <enc28j60_read_op>

000001fc <enc28j60_rcr16>:
}

// Read register pair
uint16_t enc28j60_rcr16(uint8_t adr)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	c8 2f       	mov	r28, r24
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 202:	28 2f       	mov	r18, r24
 204:	2f 71       	andi	r18, 0x1F	; 31
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	2b 31       	cpi	r18, 0x1B	; 27
 20a:	31 05       	cpc	r19, r1
 20c:	0c f4       	brge	.+2      	; 0x210 <enc28j60_rcr16+0x14>
 20e:	b8 df       	rcall	.-144    	; 0x180 <enc28j60_set_bank.part.0>

// Read register pair
uint16_t enc28j60_rcr16(uint8_t adr)
{
	enc28j60_set_bank(adr);
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr) |
 210:	6c 2f       	mov	r22, r28
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	85 df       	rcall	.-246    	; 0x120 <enc28j60_read_op>
 216:	d8 2f       	mov	r29, r24
		(enc28j60_read_op(ENC28J60_SPI_RCR, adr+1) << 8);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	6c 0f       	add	r22, r28
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	80 df       	rcall	.-256    	; 0x120 <enc28j60_read_op>
 220:	2d 2f       	mov	r18, r29
 222:	30 e0       	ldi	r19, 0x00	; 0
}
 224:	a9 01       	movw	r20, r18
 226:	58 2b       	or	r21, r24
 228:	ca 01       	movw	r24, r20
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <enc28j60_wcr>:

// Write register
void enc28j60_wcr(uint8_t adr, uint8_t arg)
{
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	1f 92       	push	r1
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	dd 27       	eor	r29, r29
 23c:	18 2f       	mov	r17, r24
 23e:	46 2f       	mov	r20, r22
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 240:	28 2f       	mov	r18, r24
 242:	2f 71       	andi	r18, 0x1F	; 31
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	2b 31       	cpi	r18, 0x1B	; 27
 248:	31 05       	cpc	r19, r1
 24a:	1c f4       	brge	.+6      	; 0x252 <enc28j60_wcr+0x22>
 24c:	69 83       	std	Y+1, r22	; 0x01
 24e:	98 df       	rcall	.-208    	; 0x180 <enc28j60_set_bank.part.0>
 250:	49 81       	ldd	r20, Y+1	; 0x01

// Write register
void enc28j60_wcr(uint8_t adr, uint8_t arg)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
 252:	61 2f       	mov	r22, r17
 254:	80 e4       	ldi	r24, 0x40	; 64
}
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17

// Write register
void enc28j60_wcr(uint8_t adr, uint8_t arg)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
 25e:	7e cf       	rjmp	.-260    	; 0x15c <enc28j60_write_op>

00000260 <enc28j60_wcr16>:
}

// Write register pair
void enc28j60_wcr16(uint8_t adr, uint16_t arg)
{
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	dd 27       	eor	r29, r29
 26e:	18 2f       	mov	r17, r24
 270:	46 2f       	mov	r20, r22
 272:	07 2f       	mov	r16, r23
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 274:	28 2f       	mov	r18, r24
 276:	2f 71       	andi	r18, 0x1F	; 31
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	2b 31       	cpi	r18, 0x1B	; 27
 27c:	31 05       	cpc	r19, r1
 27e:	1c f4       	brge	.+6      	; 0x286 <enc28j60_wcr16+0x26>
 280:	69 83       	std	Y+1, r22	; 0x01
 282:	7e df       	rcall	.-260    	; 0x180 <enc28j60_set_bank.part.0>
 284:	49 81       	ldd	r20, Y+1	; 0x01

// Write register pair
void enc28j60_wcr16(uint8_t adr, uint16_t arg)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
 286:	61 2f       	mov	r22, r17
 288:	80 e4       	ldi	r24, 0x40	; 64
 28a:	68 df       	rcall	.-304    	; 0x15c <enc28j60_write_op>
	enc28j60_write_op(ENC28J60_SPI_WCR, adr+1, arg>>8);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	61 0f       	add	r22, r17
 290:	40 2f       	mov	r20, r16
 292:	80 e4       	ldi	r24, 0x40	; 64
}
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
// Write register pair
void enc28j60_wcr16(uint8_t adr, uint16_t arg)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr+1, arg>>8);
 29e:	5e cf       	rjmp	.-324    	; 0x15c <enc28j60_write_op>

000002a0 <enc28j60_bfc>:
}

// Clear bits in register (reg &= ~mask)
void enc28j60_bfc(uint8_t adr, uint8_t mask)
{
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	1f 92       	push	r1
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	dd 27       	eor	r29, r29
 2ac:	18 2f       	mov	r17, r24
 2ae:	46 2f       	mov	r20, r22
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 2b0:	28 2f       	mov	r18, r24
 2b2:	2f 71       	andi	r18, 0x1F	; 31
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	2b 31       	cpi	r18, 0x1B	; 27
 2b8:	31 05       	cpc	r19, r1
 2ba:	1c f4       	brge	.+6      	; 0x2c2 <enc28j60_bfc+0x22>
 2bc:	69 83       	std	Y+1, r22	; 0x01
 2be:	60 df       	rcall	.-320    	; 0x180 <enc28j60_set_bank.part.0>
 2c0:	49 81       	ldd	r20, Y+1	; 0x01

// Clear bits in register (reg &= ~mask)
void enc28j60_bfc(uint8_t adr, uint8_t mask)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_BFC, adr, mask);
 2c2:	61 2f       	mov	r22, r17
 2c4:	80 ea       	ldi	r24, 0xA0	; 160
}
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17

// Clear bits in register (reg &= ~mask)
void enc28j60_bfc(uint8_t adr, uint8_t mask)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_BFC, adr, mask);
 2ce:	46 cf       	rjmp	.-372    	; 0x15c <enc28j60_write_op>

000002d0 <enc28j60_bfs>:
}

// Set bits in register (reg |= mask)
void enc28j60_bfs(uint8_t adr, uint8_t mask)
{
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	1f 92       	push	r1
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	dd 27       	eor	r29, r29
 2dc:	18 2f       	mov	r17, r24
 2de:	46 2f       	mov	r20, r22
// Set register bank
void enc28j60_set_bank(uint8_t adr)
{
	uint8_t bank;

	if( (adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR )
 2e0:	28 2f       	mov	r18, r24
 2e2:	2f 71       	andi	r18, 0x1F	; 31
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	2b 31       	cpi	r18, 0x1B	; 27
 2e8:	31 05       	cpc	r19, r1
 2ea:	1c f4       	brge	.+6      	; 0x2f2 <enc28j60_bfs+0x22>
 2ec:	69 83       	std	Y+1, r22	; 0x01
 2ee:	48 df       	rcall	.-368    	; 0x180 <enc28j60_set_bank.part.0>
 2f0:	49 81       	ldd	r20, Y+1	; 0x01

// Set bits in register (reg |= mask)
void enc28j60_bfs(uint8_t adr, uint8_t mask)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_BFS, adr, mask);
 2f2:	61 2f       	mov	r22, r17
 2f4:	80 e8       	ldi	r24, 0x80	; 128
}
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17

// Set bits in register (reg |= mask)
void enc28j60_bfs(uint8_t adr, uint8_t mask)
{
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_BFS, adr, mask);
 2fe:	2e cf       	rjmp	.-420    	; 0x15c <enc28j60_write_op>

00000300 <enc28j60_read_buffer>:
}

// Read Rx/Tx buffer (at ERDPT)
void enc28j60_read_buffer(uint8_t *buf, uint16_t len)
{
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	1f 92       	push	r1
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	dd 27       	eor	r29, r29
 316:	f8 2e       	mov	r15, r24
 318:	6b 01       	movw	r12, r22
	enc28j60_select();
 31a:	c4 98       	cbi	0x18, 4	; 24
	enc28j60_tx(ENC28J60_SPI_RBM);
 31c:	8a e3       	ldi	r24, 0x3A	; 58
 31e:	99 83       	std	Y+1, r25	; 0x01
 320:	f3 de       	rcall	.-538    	; 0x108 <enc28j60_rxtx>
	while(len--)
 322:	99 81       	ldd	r25, Y+1	; 0x01
 324:	c1 14       	cp	r12, r1
 326:	d1 04       	cpc	r13, r1
 328:	71 f0       	breq	.+28     	; 0x346 <enc28j60_read_buffer+0x46>
 32a:	0f 2d       	mov	r16, r15
 32c:	19 2f       	mov	r17, r25
 32e:	76 01       	movw	r14, r12
		*(buf++) = enc28j60_rx();
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	ea de       	rcall	.-556    	; 0x108 <enc28j60_rxtx>
 334:	f8 01       	movw	r30, r16
 336:	81 93       	st	Z+, r24
 338:	8f 01       	movw	r16, r30
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	ef 1a       	sub	r14, r31
 33e:	f1 08       	sbc	r15, r1
// Read Rx/Tx buffer (at ERDPT)
void enc28j60_read_buffer(uint8_t *buf, uint16_t len)
{
	enc28j60_select();
	enc28j60_tx(ENC28J60_SPI_RBM);
	while(len--)
 340:	e1 14       	cp	r14, r1
 342:	f1 04       	cpc	r15, r1
 344:	a9 f7       	brne	.-22     	; 0x330 <enc28j60_read_buffer+0x30>
		*(buf++) = enc28j60_rx();
	enc28j60_release();
 346:	c4 9a       	sbi	0x18, 4	; 24
}
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	df 90       	pop	r13
 358:	cf 90       	pop	r12
 35a:	08 95       	ret

0000035c <enc28j60_write_buffer>:

// Write Rx/Tx buffer (at EWRPT)
void enc28j60_write_buffer(uint8_t *buf, uint16_t len)
{
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	1f 92       	push	r1
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	dd 27       	eor	r29, r29
 372:	f8 2e       	mov	r15, r24
 374:	6b 01       	movw	r12, r22
	enc28j60_select();
 376:	c4 98       	cbi	0x18, 4	; 24
	enc28j60_tx(ENC28J60_SPI_WBM);
 378:	8a e7       	ldi	r24, 0x7A	; 122
 37a:	99 83       	std	Y+1, r25	; 0x01
 37c:	c5 de       	rcall	.-630    	; 0x108 <enc28j60_rxtx>
	while(len--)
 37e:	99 81       	ldd	r25, Y+1	; 0x01
 380:	c1 14       	cp	r12, r1
 382:	d1 04       	cpc	r13, r1
 384:	69 f0       	breq	.+26     	; 0x3a0 <enc28j60_write_buffer+0x44>
 386:	0f 2d       	mov	r16, r15
 388:	19 2f       	mov	r17, r25
 38a:	76 01       	movw	r14, r12
		enc28j60_tx(*(buf++));
 38c:	f8 01       	movw	r30, r16
 38e:	81 91       	ld	r24, Z+
 390:	8f 01       	movw	r16, r30
 392:	ba de       	rcall	.-652    	; 0x108 <enc28j60_rxtx>
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	ef 1a       	sub	r14, r31
 398:	f1 08       	sbc	r15, r1
// Write Rx/Tx buffer (at EWRPT)
void enc28j60_write_buffer(uint8_t *buf, uint16_t len)
{
	enc28j60_select();
	enc28j60_tx(ENC28J60_SPI_WBM);
	while(len--)
 39a:	e1 14       	cp	r14, r1
 39c:	f1 04       	cpc	r15, r1
 39e:	b1 f7       	brne	.-20     	; 0x38c <enc28j60_write_buffer+0x30>
		enc28j60_tx(*(buf++));
	enc28j60_release();
 3a0:	c4 9a       	sbi	0x18, 4	; 24
}
 3a2:	0f 90       	pop	r0
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	08 95       	ret

000003b6 <enc28j60_read_phy>:

// Read PHY register
uint16_t enc28j60_read_phy(uint8_t adr)
{
	enc28j60_wcr(MIREGADR, adr);
 3b6:	68 2f       	mov	r22, r24
 3b8:	84 ed       	ldi	r24, 0xD4	; 212
 3ba:	3a df       	rcall	.-396    	; 0x230 <enc28j60_wcr>
	enc28j60_bfs(MICMD, MICMD_MIIRD);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	82 ed       	ldi	r24, 0xD2	; 210
 3c0:	87 df       	rcall	.-242    	; 0x2d0 <enc28j60_bfs>
	while(enc28j60_rcr(MISTAT) & MISTAT_BUSY)
 3c2:	8a ee       	ldi	r24, 0xEA	; 234
 3c4:	07 df       	rcall	.-498    	; 0x1d4 <enc28j60_rcr>
 3c6:	80 fd       	sbrc	r24, 0
 3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <enc28j60_read_phy+0xc>
		;
	enc28j60_bfc(MICMD, MICMD_MIIRD);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	82 ed       	ldi	r24, 0xD2	; 210
 3ce:	68 df       	rcall	.-304    	; 0x2a0 <enc28j60_bfc>
	return enc28j60_rcr16(MIRD);
 3d0:	88 ed       	ldi	r24, 0xD8	; 216
 3d2:	14 cf       	rjmp	.-472    	; 0x1fc <enc28j60_rcr16>

000003d4 <enc28j60_write_phy>:
}

// Write PHY register
void enc28j60_write_phy(uint8_t adr, uint16_t data)
{
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	eb 01       	movw	r28, r22
	enc28j60_wcr(MIREGADR, adr);
 3da:	68 2f       	mov	r22, r24
 3dc:	84 ed       	ldi	r24, 0xD4	; 212
 3de:	28 df       	rcall	.-432    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr16(MIWR, data);
 3e0:	be 01       	movw	r22, r28
 3e2:	86 ed       	ldi	r24, 0xD6	; 214
 3e4:	3d df       	rcall	.-390    	; 0x260 <enc28j60_wcr16>
	while(enc28j60_rcr(MISTAT) & MISTAT_BUSY)
 3e6:	8a ee       	ldi	r24, 0xEA	; 234
 3e8:	f5 de       	rcall	.-534    	; 0x1d4 <enc28j60_rcr>
 3ea:	80 fd       	sbrc	r24, 0
 3ec:	fc cf       	rjmp	.-8      	; 0x3e6 <enc28j60_write_phy+0x12>
		;
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <enc28j60_init>:
/*
 * Init & packet Rx/Tx
 */

void enc28j60_init(uint8_t *macadr)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
	// Initialize SPI
	ENC28J60_SPI_DDR |= ENC28J60_SPI_CS|ENC28J60_SPI_DO|ENC28J60_SPI_SCK;
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	80 6d       	ori	r24, 0xD0	; 208
 3fe:	87 bb       	out	0x17, r24	; 23
	ENC28J60_SPI_DDR &= ~ENC28J60_SPI_DI;
 400:	bd 98       	cbi	0x17, 5	; 23
	enc28j60_release();
 402:	c4 9a       	sbi	0x18, 4	; 24

	USICR = (1<<USIWM0) | (1<<USICLK) | (1<<USIOIE);
 404:	82 e5       	ldi	r24, 0x52	; 82
 406:	8d b9       	out	0x0d, r24	; 13
	USISR |= (1<<USIOIF);
 408:	76 9a       	sbi	0x0e, 6	; 14

	// Reset ENC28J60
	enc28j60_soft_reset();
 40a:	cf de       	rcall	.-610    	; 0x1aa <enc28j60_soft_reset>

	// Setup Rx/Tx buffer
	enc28j60_wcr16(ERXST, ENC28J60_RXSTART);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	26 df       	rcall	.-436    	; 0x260 <enc28j60_wcr16>
	enc28j60_wcr16(ERXRDPT, ENC28J60_RXSTART);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	8c e0       	ldi	r24, 0x0C	; 12
 41a:	22 df       	rcall	.-444    	; 0x260 <enc28j60_wcr16>
	enc28j60_wcr16(ERXND, ENC28J60_RXEND);
 41c:	6f ef       	ldi	r22, 0xFF	; 255
 41e:	79 e1       	ldi	r23, 0x19	; 25
 420:	8a e0       	ldi	r24, 0x0A	; 10
 422:	1e df       	rcall	.-452    	; 0x260 <enc28j60_wcr16>
	enc28j60_rxrdpt = ENC28J60_RXSTART;
 424:	10 92 69 00 	sts	0x0069, r1
 428:	10 92 68 00 	sts	0x0068, r1

    //Setup MAC filters
    enc28j60_bfc(ERXFCON, ERXFCON_BCEN); //Disable broadcast packets receiving
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	88 e3       	ldi	r24, 0x38	; 56
 430:	37 df       	rcall	.-402    	; 0x2a0 <enc28j60_bfc>

	// Setup MAC
	enc28j60_wcr(MACON1, MACON1_TXPAUS| // Enable flow control
 432:	6d e0       	ldi	r22, 0x0D	; 13
 434:	80 ec       	ldi	r24, 0xC0	; 192
 436:	fc de       	rcall	.-520    	; 0x230 <enc28j60_wcr>
		MACON1_RXPAUS|MACON1_MARXEN); // Enable MAC Rx
	enc28j60_wcr(MACON2, 0); // Clear reset
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 ec       	ldi	r24, 0xC1	; 193
 43c:	f9 de       	rcall	.-526    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MACON3, MACON3_PADCFG0| // Enable padding,
 43e:	63 e3       	ldi	r22, 0x33	; 51
 440:	82 ec       	ldi	r24, 0xC2	; 194
 442:	f6 de       	rcall	.-532    	; 0x230 <enc28j60_wcr>
		MACON3_TXCRCEN|MACON3_FRMLNEN|MACON3_FULDPX); // Enable crc & frame len chk
	enc28j60_wcr16(MAMXFL, ENC28J60_MAXFRAME);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	72 e0       	ldi	r23, 0x02	; 2
 448:	8a ec       	ldi	r24, 0xCA	; 202
 44a:	0a df       	rcall	.-492    	; 0x260 <enc28j60_wcr16>
	enc28j60_wcr(MABBIPG, 0x15); // Set inter-frame gap
 44c:	65 e1       	ldi	r22, 0x15	; 21
 44e:	84 ec       	ldi	r24, 0xC4	; 196
 450:	ef de       	rcall	.-546    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAIPGL, 0x12);
 452:	62 e1       	ldi	r22, 0x12	; 18
 454:	86 ec       	ldi	r24, 0xC6	; 198
 456:	ec de       	rcall	.-552    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAIPGH, 0x0c);
 458:	6c e0       	ldi	r22, 0x0C	; 12
 45a:	87 ec       	ldi	r24, 0xC7	; 199
 45c:	e9 de       	rcall	.-558    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAADR5, macadr[0]); // Set MAC address
 45e:	68 81       	ld	r22, Y
 460:	84 ee       	ldi	r24, 0xE4	; 228
 462:	e6 de       	rcall	.-564    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAADR4, macadr[1]);
 464:	69 81       	ldd	r22, Y+1	; 0x01
 466:	85 ee       	ldi	r24, 0xE5	; 229
 468:	e3 de       	rcall	.-570    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAADR3, macadr[2]);
 46a:	6a 81       	ldd	r22, Y+2	; 0x02
 46c:	82 ee       	ldi	r24, 0xE2	; 226
 46e:	e0 de       	rcall	.-576    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAADR2, macadr[3]);
 470:	6b 81       	ldd	r22, Y+3	; 0x03
 472:	83 ee       	ldi	r24, 0xE3	; 227
 474:	dd de       	rcall	.-582    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAADR1, macadr[4]);
 476:	6c 81       	ldd	r22, Y+4	; 0x04
 478:	80 ee       	ldi	r24, 0xE0	; 224
 47a:	da de       	rcall	.-588    	; 0x230 <enc28j60_wcr>
	enc28j60_wcr(MAADR0, macadr[5]);
 47c:	6d 81       	ldd	r22, Y+5	; 0x05
 47e:	81 ee       	ldi	r24, 0xE1	; 225
 480:	d7 de       	rcall	.-594    	; 0x230 <enc28j60_wcr>

	// Setup PHY
	enc28j60_write_phy(PHCON1, PHCON1_PDPXMD); // Force full-duplex mode
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	71 e0       	ldi	r23, 0x01	; 1
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	a5 df       	rcall	.-182    	; 0x3d4 <enc28j60_write_phy>
	enc28j60_write_phy(PHCON2, PHCON2_HDLDIS); // Disable loopback
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	71 e0       	ldi	r23, 0x01	; 1
 48e:	80 e1       	ldi	r24, 0x10	; 16
 490:	a1 df       	rcall	.-190    	; 0x3d4 <enc28j60_write_phy>
	enc28j60_write_phy(PHLCON, // Configure LED ctrl
 492:	64 e7       	ldi	r22, 0x74	; 116
 494:	74 e0       	ldi	r23, 0x04	; 4
 496:	84 e1       	ldi	r24, 0x14	; 20
		PHLCON_LBCFG2 | PHLCON_LBCFG1 | PHLCON_LBCFG0 | //LEDB is activity indicator
		PHLCON_LFRQ0);

	// Enable Rx packets
	//enc28j60_bfs(ECON1, ECON1_RXEN);
}
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
	enc28j60_wcr(MAADR0, macadr[5]);

	// Setup PHY
	enc28j60_write_phy(PHCON1, PHCON1_PDPXMD); // Force full-duplex mode
	enc28j60_write_phy(PHCON2, PHCON2_HDLDIS); // Disable loopback
	enc28j60_write_phy(PHLCON, // Configure LED ctrl
 49c:	9b cf       	rjmp	.-202    	; 0x3d4 <enc28j60_write_phy>

0000049e <enc28j60_send_packet>:
	// Enable Rx packets
	//enc28j60_bfs(ECON1, ECON1_RXEN);
}

void enc28j60_send_packet(uint8_t *data, uint16_t len)
{
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	8c 01       	movw	r16, r24
 4a8:	eb 01       	movw	r28, r22
	while(enc28j60_rcr(ECON1) & ECON1_TXRTS)
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <enc28j60_send_packet+0x16>
	{
		// TXRTS may not clear - ENC28J60 bug. We must reset
		// transmit logic in cause of Tx error
		if(enc28j60_rcr(EIR) & EIR_TXERIF)
 4ac:	8c e1       	ldi	r24, 0x1C	; 28
 4ae:	92 de       	rcall	.-732    	; 0x1d4 <enc28j60_rcr>
 4b0:	81 fd       	sbrc	r24, 1
 4b2:	1f c0       	rjmp	.+62     	; 0x4f2 <enc28j60_send_packet+0x54>
	//enc28j60_bfs(ECON1, ECON1_RXEN);
}

void enc28j60_send_packet(uint8_t *data, uint16_t len)
{
	while(enc28j60_rcr(ECON1) & ECON1_TXRTS)
 4b4:	8f e1       	ldi	r24, 0x1F	; 31
 4b6:	8e de       	rcall	.-740    	; 0x1d4 <enc28j60_rcr>
 4b8:	83 fd       	sbrc	r24, 3
 4ba:	f8 cf       	rjmp	.-16     	; 0x4ac <enc28j60_send_packet+0xe>
			enc28j60_bfs(ECON1, ECON1_TXRST);
			enc28j60_bfc(ECON1, ECON1_TXRST);
		}
	}

	enc28j60_wcr16(EWRPT, ENC28J60_TXSTART);
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	7a e1       	ldi	r23, 0x1A	; 26
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	ce de       	rcall	.-612    	; 0x260 <enc28j60_wcr16>
	enc28j60_write_buffer((uint8_t*)"\x00", 1);
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	86 e6       	ldi	r24, 0x66	; 102
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	47 df       	rcall	.-370    	; 0x35c <enc28j60_write_buffer>
	enc28j60_write_buffer(data, len);
 4ce:	be 01       	movw	r22, r28
 4d0:	c8 01       	movw	r24, r16
 4d2:	44 df       	rcall	.-376    	; 0x35c <enc28j60_write_buffer>

	enc28j60_wcr16(ETXST, ENC28J60_TXSTART);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	7a e1       	ldi	r23, 0x1A	; 26
 4d8:	84 e0       	ldi	r24, 0x04	; 4
 4da:	c2 de       	rcall	.-636    	; 0x260 <enc28j60_wcr16>
	enc28j60_wcr16(ETXND, ENC28J60_TXSTART + len);
 4dc:	be 01       	movw	r22, r28
 4de:	76 5e       	subi	r23, 0xE6	; 230
 4e0:	86 e0       	ldi	r24, 0x06	; 6
 4e2:	be de       	rcall	.-644    	; 0x260 <enc28j60_wcr16>

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
 4e4:	68 e0       	ldi	r22, 0x08	; 8
 4e6:	8f e1       	ldi	r24, 0x1F	; 31
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
	enc28j60_write_buffer(data, len);

	enc28j60_wcr16(ETXST, ENC28J60_TXSTART);
	enc28j60_wcr16(ETXND, ENC28J60_TXSTART + len);

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
 4f0:	ef ce       	rjmp	.-546    	; 0x2d0 <enc28j60_bfs>
	{
		// TXRTS may not clear - ENC28J60 bug. We must reset
		// transmit logic in cause of Tx error
		if(enc28j60_rcr(EIR) & EIR_TXERIF)
		{
			enc28j60_bfs(ECON1, ECON1_TXRST);
 4f2:	60 e8       	ldi	r22, 0x80	; 128
 4f4:	8f e1       	ldi	r24, 0x1F	; 31
 4f6:	ec de       	rcall	.-552    	; 0x2d0 <enc28j60_bfs>
			enc28j60_bfc(ECON1, ECON1_TXRST);
 4f8:	60 e8       	ldi	r22, 0x80	; 128
 4fa:	8f e1       	ldi	r24, 0x1F	; 31
 4fc:	d1 de       	rcall	.-606    	; 0x2a0 <enc28j60_bfc>
 4fe:	da cf       	rjmp	.-76     	; 0x4b4 <enc28j60_send_packet+0x16>

00000500 <enc28j60_recv_packet>:

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
}

uint16_t enc28j60_recv_packet(uint8_t *buf, uint16_t buflen)
{
 500:	cf 92       	push	r12
 502:	df 92       	push	r13
 504:	ef 92       	push	r14
 506:	ff 92       	push	r15
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	dd 27       	eor	r29, r29
 514:	c4 50       	subi	r28, 0x04	; 4
 516:	cd bf       	out	0x3d, r28	; 61
 518:	7c 01       	movw	r14, r24
 51a:	6b 01       	movw	r12, r22
	uint16_t len = 0, rxlen, status, temp;

	if(enc28j60_rcr(EPKTCNT))
 51c:	89 e3       	ldi	r24, 0x39	; 57
 51e:	5a de       	rcall	.-844    	; 0x1d4 <enc28j60_rcr>
 520:	81 11       	cpse	r24, r1
 522:	0e c0       	rjmp	.+28     	; 0x540 <enc28j60_recv_packet+0x40>
	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
}

uint16_t enc28j60_recv_packet(uint8_t *buf, uint16_t buflen)
{
	uint16_t len = 0, rxlen, status, temp;
 524:	00 e0       	ldi	r16, 0x00	; 0
 526:	10 e0       	ldi	r17, 0x00	; 0
		// Decrement packet counter
		enc28j60_bfs(ECON2, ECON2_PKTDEC);
	}

	return len;
}
 528:	c8 01       	movw	r24, r16
 52a:	cc 5f       	subi	r28, 0xFC	; 252
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	08 95       	ret
{
	uint16_t len = 0, rxlen, status, temp;

	if(enc28j60_rcr(EPKTCNT))
	{
		enc28j60_wcr16(ERDPT, enc28j60_rxrdpt);
 540:	60 91 68 00 	lds	r22, 0x0068
 544:	70 91 69 00 	lds	r23, 0x0069
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	8a de       	rcall	.-748    	; 0x260 <enc28j60_wcr16>

		enc28j60_read_buffer((void*)&enc28j60_rxrdpt, sizeof(enc28j60_rxrdpt));
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	88 e6       	ldi	r24, 0x68	; 104
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	d5 de       	rcall	.-598    	; 0x300 <enc28j60_read_buffer>
		enc28j60_read_buffer((void*)&rxlen, sizeof(rxlen));
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	ce 01       	movw	r24, r28
 55c:	03 96       	adiw	r24, 0x03	; 3
 55e:	d0 de       	rcall	.-608    	; 0x300 <enc28j60_read_buffer>
		enc28j60_read_buffer((void*)&status, sizeof(status));
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	cb de       	rcall	.-618    	; 0x300 <enc28j60_read_buffer>

		if(status & 0x80) //success
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	87 ff       	sbrs	r24, 7
 56e:	0c c0       	rjmp	.+24     	; 0x588 <enc28j60_recv_packet+0x88>
		{
			len = rxlen - 4; //throw out crc
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	9c 81       	ldd	r25, Y+4	; 0x04
 574:	04 97       	sbiw	r24, 0x04	; 4
 576:	86 01       	movw	r16, r12
 578:	8c 15       	cp	r24, r12
 57a:	9d 05       	cpc	r25, r13
 57c:	08 f4       	brcc	.+2      	; 0x580 <enc28j60_recv_packet+0x80>
 57e:	8c 01       	movw	r16, r24
			if(len > buflen) len = buflen;
			enc28j60_read_buffer(buf, len);
 580:	b8 01       	movw	r22, r16
 582:	c7 01       	movw	r24, r14
 584:	bd de       	rcall	.-646    	; 0x300 <enc28j60_read_buffer>
 586:	02 c0       	rjmp	.+4      	; 0x58c <enc28j60_recv_packet+0x8c>
	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
}

uint16_t enc28j60_recv_packet(uint8_t *buf, uint16_t buflen)
{
	uint16_t len = 0, rxlen, status, temp;
 588:	00 e0       	ldi	r16, 0x00	; 0
 58a:	10 e0       	ldi	r17, 0x00	; 0
			if(len > buflen) len = buflen;
			enc28j60_read_buffer(buf, len);
		}

		// Set Rx read pointer to next packet
		temp = (enc28j60_rxrdpt - 1) & ENC28J60_BUFEND;
 58c:	60 91 68 00 	lds	r22, 0x0068
 590:	70 91 69 00 	lds	r23, 0x0069
 594:	61 50       	subi	r22, 0x01	; 1
 596:	71 09       	sbc	r23, r1
 598:	7f 71       	andi	r23, 0x1F	; 31
		enc28j60_wcr16(ERXRDPT, temp);
 59a:	8c e0       	ldi	r24, 0x0C	; 12
 59c:	61 de       	rcall	.-830    	; 0x260 <enc28j60_wcr16>

		// Decrement packet counter
		enc28j60_bfs(ECON2, ECON2_PKTDEC);
 59e:	60 e4       	ldi	r22, 0x40	; 64
 5a0:	8e e1       	ldi	r24, 0x1E	; 30
 5a2:	96 de       	rcall	.-724    	; 0x2d0 <enc28j60_bfs>
 5a4:	c1 cf       	rjmp	.-126    	; 0x528 <enc28j60_recv_packet+0x28>

000005a6 <ip_cksum>:
 * IP
 */

// calculate IP checksum
uint16_t ip_cksum(uint32_t sum, uint8_t *buf, size_t len)
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
	while(len >= 2)
 5ac:	22 30       	cpi	r18, 0x02	; 2
 5ae:	31 05       	cpc	r19, r1
 5b0:	d0 f0       	brcs	.+52     	; 0x5e6 <ip_cksum+0x40>
 5b2:	89 01       	movw	r16, r18
 5b4:	fa 01       	movw	r30, r20
	{
		sum += ((uint16_t)*buf << 8) | *(buf+1);
 5b6:	a0 81       	ld	r26, Z
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	ba 2f       	mov	r27, r26
 5bc:	aa 27       	eor	r26, r26
 5be:	c1 81       	ldd	r28, Z+1	; 0x01
 5c0:	ac 2b       	or	r26, r28
 5c2:	6a 0f       	add	r22, r26
 5c4:	7b 1f       	adc	r23, r27
 5c6:	81 1d       	adc	r24, r1
 5c8:	91 1d       	adc	r25, r1
		buf += 2;
 5ca:	32 96       	adiw	r30, 0x02	; 2
		len -= 2;
 5cc:	02 50       	subi	r16, 0x02	; 2
 5ce:	11 09       	sbc	r17, r1
 */

// calculate IP checksum
uint16_t ip_cksum(uint32_t sum, uint8_t *buf, size_t len)
{
	while(len >= 2)
 5d0:	02 30       	cpi	r16, 0x02	; 2
 5d2:	11 05       	cpc	r17, r1
 5d4:	80 f7       	brcc	.-32     	; 0x5b6 <ip_cksum+0x10>
 5d6:	f9 01       	movw	r30, r18
 5d8:	32 97       	sbiw	r30, 0x02	; 2
 5da:	ee 7f       	andi	r30, 0xFE	; 254
 5dc:	32 96       	adiw	r30, 0x02	; 2
 5de:	4e 0f       	add	r20, r30
 5e0:	5f 1f       	adc	r21, r31
 5e2:	21 70       	andi	r18, 0x01	; 1
 5e4:	33 27       	eor	r19, r19
		sum += ((uint16_t)*buf << 8) | *(buf+1);
		buf += 2;
		len -= 2;
	}

	if(len)
 5e6:	23 2b       	or	r18, r19
 5e8:	81 f0       	breq	.+32     	; 0x60a <ip_cksum+0x64>
		sum += (uint16_t)*buf << 8;
 5ea:	fa 01       	movw	r30, r20
 5ec:	20 81       	ld	r18, Z
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	32 2f       	mov	r19, r18
 5f2:	22 27       	eor	r18, r18
 5f4:	62 0f       	add	r22, r18
 5f6:	73 1f       	adc	r23, r19
 5f8:	81 1d       	adc	r24, r1
 5fa:	91 1d       	adc	r25, r1
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <ip_cksum+0x64>

	while(sum >> 16)
		sum = (sum & 0xffff) + (sum >> 16);
 5fe:	88 27       	eor	r24, r24
 600:	99 27       	eor	r25, r25
 602:	60 0f       	add	r22, r16
 604:	71 1f       	adc	r23, r17
 606:	82 1f       	adc	r24, r18
 608:	93 1f       	adc	r25, r19
	}

	if(len)
		sum += (uint16_t)*buf << 8;

	while(sum >> 16)
 60a:	8c 01       	movw	r16, r24
 60c:	22 27       	eor	r18, r18
 60e:	33 27       	eor	r19, r19
 610:	01 15       	cp	r16, r1
 612:	11 05       	cpc	r17, r1
 614:	21 05       	cpc	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	91 f7       	brne	.-28     	; 0x5fe <ip_cksum+0x58>
		sum = (sum & 0xffff) + (sum >> 16);

	return ~htons((uint16_t)sum);
 61a:	96 2f       	mov	r25, r22
 61c:	87 2f       	mov	r24, r23
}
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <ip_filter>:
	ip_packet_t *packet = (void*)(frame->data);

	//if(len >= sizeof(ip_packet_t))
	//{
		hcs = packet->cksum;
		packet->cksum = 0;
 62a:	fc 01       	movw	r30, r24
 62c:	11 8e       	std	Z+25, r1	; 0x19
 62e:	10 8e       	std	Z+24, r1	; 0x18

		if( (packet->ver_head_len == 0x45) &&
 630:	26 85       	ldd	r18, Z+14	; 0x0e
 632:	25 34       	cpi	r18, 0x45	; 69
 634:	09 f0       	breq	.+2      	; 0x638 <ip_filter+0xe>
 636:	08 95       	ret

// process IP packet
void ip_filter(eth_frame_t *frame, uint16_t len)
{
	uint16_t hcs;
	ip_packet_t *packet = (void*)(frame->data);
 638:	ac 01       	movw	r20, r24
 63a:	42 5f       	subi	r20, 0xF2	; 242
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
	//{
		hcs = packet->cksum;
		packet->cksum = 0;

		if( (packet->ver_head_len == 0x45) &&
			(ip_cksum(0, (void*)packet, sizeof(ip_packet_t)) == hcs) &&
 63e:	24 e1       	ldi	r18, 0x14	; 20
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	cb 01       	movw	r24, r22
 648:	ae cf       	rjmp	.-164    	; 0x5a6 <ip_cksum>

0000064a <arp_search_cache>:
 * ARP
 */

// search ARP cache
uint8_t *arp_search_cache(uint32_t node_ip_addr)
{
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
 64e:	00 91 6b 00 	lds	r16, 0x006B
 652:	10 91 6c 00 	lds	r17, 0x006C
 656:	20 91 6d 00 	lds	r18, 0x006D
 65a:	30 91 6e 00 	lds	r19, 0x006E
 65e:	06 17       	cp	r16, r22
 660:	17 07       	cpc	r17, r23
 662:	28 07       	cpc	r18, r24
 664:	39 07       	cpc	r19, r25
 666:	29 f0       	breq	.+10     	; 0x672 <arp_search_cache+0x28>
			return arp_cache[i].mac_addr;
	}
	return 0;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
}
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	08 95       	ret
{
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
			return arp_cache[i].mac_addr;
 672:	8f e6       	ldi	r24, 0x6F	; 111
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	fa cf       	rjmp	.-12     	; 0x66c <arp_search_cache+0x22>

00000678 <arp_resolve>:

// resolve MAC address
// returns 0 if still resolving
// (invalidates net_buffer if not resolved)
uint8_t *arp_resolve(uint32_t node_ip_addr)
{
 678:	cf 92       	push	r12
 67a:	df 92       	push	r13
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	6b 01       	movw	r12, r22
 682:	7c 01       	movw	r14, r24
uint8_t *arp_search_cache(uint32_t node_ip_addr)
{
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
 684:	80 91 6b 00 	lds	r24, 0x006B
 688:	90 91 6c 00 	lds	r25, 0x006C
 68c:	a0 91 6d 00 	lds	r26, 0x006D
 690:	b0 91 6e 00 	lds	r27, 0x006E
 694:	c8 16       	cp	r12, r24
 696:	d9 06       	cpc	r13, r25
 698:	ea 06       	cpc	r14, r26
 69a:	fb 06       	cpc	r15, r27
 69c:	09 f4       	brne	.+2      	; 0x6a0 <arp_resolve+0x28>
 69e:	5b c0       	rjmp	.+182    	; 0x756 <arp_resolve+0xde>
	// search arp cache
	if((mac = arp_search_cache(node_ip_addr)))
		return mac;

	// send request
	memset(frame->to_addr, 0xff, 6);
 6a0:	46 e0       	ldi	r20, 0x06	; 6
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	6f ef       	ldi	r22, 0xFF	; 255
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	84 e8       	ldi	r24, 0x84	; 132
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	a3 d2       	rcall	.+1350   	; 0xbf4 <memset>
	frame->type = ETH_TYPE_ARP;
 6ae:	88 e0       	ldi	r24, 0x08	; 8
 6b0:	96 e0       	ldi	r25, 0x06	; 6
 6b2:	90 93 91 00 	sts	0x0091, r25
 6b6:	80 93 90 00 	sts	0x0090, r24

	msg->hw_type = ARP_HW_TYPE_ETH;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	90 93 93 00 	sts	0x0093, r25
 6c2:	80 93 92 00 	sts	0x0092, r24
	msg->proto_type = ARP_PROTO_TYPE_IP;
 6c6:	28 e0       	ldi	r18, 0x08	; 8
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	30 93 95 00 	sts	0x0095, r19
 6ce:	20 93 94 00 	sts	0x0094, r18
	msg->hw_addr_len = 6;
 6d2:	26 e0       	ldi	r18, 0x06	; 6
 6d4:	20 93 96 00 	sts	0x0096, r18
	msg->proto_addr_len = 4;
 6d8:	34 e0       	ldi	r19, 0x04	; 4
 6da:	30 93 97 00 	sts	0x0097, r19
	msg->type = ARP_TYPE_REQUEST;
 6de:	90 93 99 00 	sts	0x0099, r25
 6e2:	80 93 98 00 	sts	0x0098, r24
	memcpy(msg->mac_addr_from, mac_addr, 6);
 6e6:	e0 e6       	ldi	r30, 0x60	; 96
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	aa e9       	ldi	r26, 0x9A	; 154
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	82 2f       	mov	r24, r18
 6f0:	01 90       	ld	r0, Z+
 6f2:	0d 92       	st	X+, r0
 6f4:	8a 95       	dec	r24
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <arp_resolve+0x78>
	msg->ip_addr_from = ip_addr;
 6f8:	80 ec       	ldi	r24, 0xC0	; 192
 6fa:	98 ea       	ldi	r25, 0xA8	; 168
 6fc:	a4 e6       	ldi	r26, 0x64	; 100
 6fe:	ba e5       	ldi	r27, 0x5A	; 90
 700:	80 93 a0 00 	sts	0x00A0, r24
 704:	90 93 a1 00 	sts	0x00A1, r25
 708:	a0 93 a2 00 	sts	0x00A2, r26
 70c:	b0 93 a3 00 	sts	0x00A3, r27
	memset(msg->mac_addr_to, 0x00, 6);
 710:	e4 ea       	ldi	r30, 0xA4	; 164
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	df 01       	movw	r26, r30
 716:	82 2f       	mov	r24, r18
 718:	1d 92       	st	X+, r1
 71a:	8a 95       	dec	r24
 71c:	e9 f7       	brne	.-6      	; 0x718 <arp_resolve+0xa0>
	msg->ip_addr_to = node_ip_addr;
 71e:	c0 92 aa 00 	sts	0x00AA, r12
 722:	d0 92 ab 00 	sts	0x00AB, r13
 726:	e0 92 ac 00 	sts	0x00AC, r14
 72a:	f0 92 ad 00 	sts	0x00AD, r15
// fields must be set:
//	- frame.dst
//	- frame.type
void eth_send(eth_frame_t *frame, uint16_t len)
{
	memcpy(frame->from_addr, mac_addr, 6);
 72e:	e0 e6       	ldi	r30, 0x60	; 96
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	aa e8       	ldi	r26, 0x8A	; 138
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	01 90       	ld	r0, Z+
 738:	0d 92       	st	X+, r0
 73a:	2a 95       	dec	r18
 73c:	e1 f7       	brne	.-8      	; 0x736 <arp_resolve+0xbe>
	enc28j60_send_packet((void*)frame, len +
 73e:	6a e2       	ldi	r22, 0x2A	; 42
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	84 e8       	ldi	r24, 0x84	; 132
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	ab de       	rcall	.-682    	; 0x49e <enc28j60_send_packet>
	msg->ip_addr_from = ip_addr;
	memset(msg->mac_addr_to, 0x00, 6);
	msg->ip_addr_to = node_ip_addr;

	eth_send(frame, sizeof(arp_message_t));
	return 0;
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
}
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	08 95       	ret
	eth_frame_t *frame = (void*)net_buf;
	arp_message_t *msg = (void*)(frame->data);
	uint8_t *mac;

	// search arp cache
	if((mac = arp_search_cache(node_ip_addr)))
 756:	8f e6       	ldi	r24, 0x6F	; 111
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	89 2b       	or	r24, r25
 75c:	09 f4       	brne	.+2      	; 0x760 <arp_resolve+0xe8>
 75e:	a0 cf       	rjmp	.-192    	; 0x6a0 <arp_resolve+0x28>
{
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
			return arp_cache[i].mac_addr;
 760:	8f e6       	ldi	r24, 0x6F	; 111
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	f3 cf       	rjmp	.-26     	; 0x74c <arp_resolve+0xd4>

00000766 <ip_send>:
// fields must be set:
//	- ip.dst
//	- ip.proto
// len is IP packet payload length
uint8_t ip_send(eth_frame_t *frame, uint16_t len)
{
 766:	8f 92       	push	r8
 768:	9f 92       	push	r9
 76a:	af 92       	push	r10
 76c:	bf 92       	push	r11
 76e:	ef 92       	push	r14
 770:	ff 92       	push	r15
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	ec 01       	movw	r28, r24
 77c:	8b 01       	movw	r16, r22
	ip_packet_t *ip = (void*)(frame->data);
 77e:	7c 01       	movw	r14, r24
 780:	2e e0       	ldi	r18, 0x0E	; 14
 782:	e2 0e       	add	r14, r18
 784:	f1 1c       	adc	r15, r1
	uint32_t route_ip;
	uint8_t *mac_addr_to;

	// set frame.dst
	if(ip->to_addr == ip_broadcast)
 786:	6e 8d       	ldd	r22, Y+30	; 0x1e
 788:	7f 8d       	ldd	r23, Y+31	; 0x1f
 78a:	88 a1       	ldd	r24, Y+32	; 0x20
 78c:	99 a1       	ldd	r25, Y+33	; 0x21
 78e:	60 3c       	cpi	r22, 0xC0	; 192
 790:	28 ea       	ldi	r18, 0xA8	; 168
 792:	72 07       	cpc	r23, r18
 794:	24 e6       	ldi	r18, 0x64	; 100
 796:	82 07       	cpc	r24, r18
 798:	2f ef       	ldi	r18, 0xFF	; 255
 79a:	92 07       	cpc	r25, r18
 79c:	09 f4       	brne	.+2      	; 0x7a0 <ip_send+0x3a>
 79e:	66 c0       	rjmp	.+204    	; 0x86c <ip_send+0x106>
		memset(frame->to_addr, 0xff, 6);
	}
	else
	{
		// apply route
		if( ((ip->to_addr ^ ip_addr) & ip_mask) == 0 )
 7a0:	4b 01       	movw	r8, r22
 7a2:	5c 01       	movw	r10, r24
 7a4:	20 ec       	ldi	r18, 0xC0	; 192
 7a6:	82 26       	eor	r8, r18
 7a8:	28 ea       	ldi	r18, 0xA8	; 168
 7aa:	92 26       	eor	r9, r18
 7ac:	24 e6       	ldi	r18, 0x64	; 100
 7ae:	a2 26       	eor	r10, r18
 7b0:	2a e5       	ldi	r18, 0x5A	; 90
 7b2:	b2 26       	eor	r11, r18
 7b4:	bb 24       	eor	r11, r11
 7b6:	89 28       	or	r8, r9
 7b8:	8a 28       	or	r8, r10
 7ba:	8b 28       	or	r8, r11
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <ip_send+0x5a>
 7be:	4c c0       	rjmp	.+152    	; 0x858 <ip_send+0xf2>
			route_ip = ip->to_addr;
		else
			route_ip = ip_gateway;

		// resolve mac address
		if(!(mac_addr_to = arp_resolve(route_ip)))
 7c0:	5b df       	rcall	.-330    	; 0x678 <arp_resolve>
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <ip_send+0x62>
 7c6:	50 c0       	rjmp	.+160    	; 0x868 <ip_send+0x102>
			return 0;
		memcpy(frame->to_addr, mac_addr_to, 6);
 7c8:	26 e0       	ldi	r18, 0x06	; 6
 7ca:	fc 01       	movw	r30, r24
 7cc:	de 01       	movw	r26, r28
 7ce:	01 90       	ld	r0, Z+
 7d0:	0d 92       	st	X+, r0
 7d2:	2a 95       	dec	r18
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <ip_send+0x68>
	}

	// set frame.type
	frame->type = ETH_TYPE_IP;
 7d6:	88 e0       	ldi	r24, 0x08	; 8
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	9d 87       	std	Y+13, r25	; 0x0d
 7dc:	8c 87       	std	Y+12, r24	; 0x0c

	// fill IP header
	len += sizeof(ip_packet_t);

	ip->ver_head_len = 0x45;
 7de:	85 e4       	ldi	r24, 0x45	; 69
 7e0:	8e 87       	std	Y+14, r24	; 0x0e
	ip->tos = 0;
 7e2:	1f 86       	std	Y+15, r1	; 0x0f

	// set frame.type
	frame->type = ETH_TYPE_IP;

	// fill IP header
	len += sizeof(ip_packet_t);
 7e4:	c8 01       	movw	r24, r16
 7e6:	44 96       	adiw	r24, 0x14	; 20

	ip->ver_head_len = 0x45;
	ip->tos = 0;
	ip->total_len = htons(len);
 7e8:	98 27       	eor	r25, r24
 7ea:	89 27       	eor	r24, r25
 7ec:	98 27       	eor	r25, r24
 7ee:	99 8b       	std	Y+17, r25	; 0x11
 7f0:	88 8b       	std	Y+16, r24	; 0x10
	ip->fragment_id = 0;
 7f2:	1b 8a       	std	Y+19, r1	; 0x13
 7f4:	1a 8a       	std	Y+18, r1	; 0x12
	ip->flags_framgent_offset = 0;
 7f6:	1d 8a       	std	Y+21, r1	; 0x15
 7f8:	1c 8a       	std	Y+20, r1	; 0x14
	ip->ttl = IP_PACKET_TTL;
 7fa:	80 e4       	ldi	r24, 0x40	; 64
 7fc:	8e 8b       	std	Y+22, r24	; 0x16
	ip->cksum = 0;
 7fe:	19 8e       	std	Y+25, r1	; 0x19
 800:	18 8e       	std	Y+24, r1	; 0x18
	ip->from_addr = ip_addr;
 802:	80 ec       	ldi	r24, 0xC0	; 192
 804:	98 ea       	ldi	r25, 0xA8	; 168
 806:	a4 e6       	ldi	r26, 0x64	; 100
 808:	ba e5       	ldi	r27, 0x5A	; 90
 80a:	8a 8f       	std	Y+26, r24	; 0x1a
 80c:	9b 8f       	std	Y+27, r25	; 0x1b
 80e:	ac 8f       	std	Y+28, r26	; 0x1c
 810:	bd 8f       	std	Y+29, r27	; 0x1d
	ip->cksum = ip_cksum(0, (void*)ip, sizeof(ip_packet_t));
 812:	24 e1       	ldi	r18, 0x14	; 20
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	a7 01       	movw	r20, r14
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	cb 01       	movw	r24, r22
 81e:	c3 de       	rcall	.-634    	; 0x5a6 <ip_cksum>
 820:	99 8f       	std	Y+25, r25	; 0x19
 822:	88 8f       	std	Y+24, r24	; 0x18
// fields must be set:
//	- frame.dst
//	- frame.type
void eth_send(eth_frame_t *frame, uint16_t len)
{
	memcpy(frame->from_addr, mac_addr, 6);
 824:	86 e0       	ldi	r24, 0x06	; 6
 826:	e0 e6       	ldi	r30, 0x60	; 96
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	de 01       	movw	r26, r28
 82c:	16 96       	adiw	r26, 0x06	; 6
 82e:	01 90       	ld	r0, Z+
 830:	0d 92       	st	X+, r0
 832:	8a 95       	dec	r24
 834:	e1 f7       	brne	.-8      	; 0x82e <ip_send+0xc8>
	enc28j60_send_packet((void*)frame, len +
 836:	b8 01       	movw	r22, r16
 838:	6e 5d       	subi	r22, 0xDE	; 222
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	ce 01       	movw	r24, r28
 83e:	2f de       	rcall	.-930    	; 0x49e <enc28j60_send_packet>
	ip->from_addr = ip_addr;
	ip->cksum = ip_cksum(0, (void*)ip, sizeof(ip_packet_t));

	// send frame
	eth_send(frame, len);
	return 1;
 840:	81 e0       	ldi	r24, 0x01	; 1
}
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	bf 90       	pop	r11
 850:	af 90       	pop	r10
 852:	9f 90       	pop	r9
 854:	8f 90       	pop	r8
 856:	08 95       	ret
	{
		// apply route
		if( ((ip->to_addr ^ ip_addr) & ip_mask) == 0 )
			route_ip = ip->to_addr;
		else
			route_ip = ip_gateway;
 858:	60 ec       	ldi	r22, 0xC0	; 192
 85a:	78 ea       	ldi	r23, 0xA8	; 168
 85c:	84 e6       	ldi	r24, 0x64	; 100
 85e:	9e ef       	ldi	r25, 0xFE	; 254

		// resolve mac address
		if(!(mac_addr_to = arp_resolve(route_ip)))
 860:	0b df       	rcall	.-490    	; 0x678 <arp_resolve>
 862:	00 97       	sbiw	r24, 0x00	; 0
 864:	09 f0       	breq	.+2      	; 0x868 <ip_send+0x102>
 866:	b0 cf       	rjmp	.-160    	; 0x7c8 <ip_send+0x62>
			return 0;
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	eb cf       	rjmp	.-42     	; 0x842 <ip_send+0xdc>

	// set frame.dst
	if(ip->to_addr == ip_broadcast)
	{
		// use broadcast MAC
		memset(frame->to_addr, 0xff, 6);
 86c:	46 e0       	ldi	r20, 0x06	; 6
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	6f ef       	ldi	r22, 0xFF	; 255
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	ce 01       	movw	r24, r28
 876:	be d1       	rcall	.+892    	; 0xbf4 <memset>
 878:	ae cf       	rjmp	.-164    	; 0x7d6 <ip_send+0x70>

0000087a <eth_send>:
// fields must be set:
//	- frame.dst
//	- frame.type
void eth_send(eth_frame_t *frame, uint16_t len)
{
	memcpy(frame->from_addr, mac_addr, 6);
 87a:	26 e0       	ldi	r18, 0x06	; 6
 87c:	e0 e6       	ldi	r30, 0x60	; 96
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	dc 01       	movw	r26, r24
 882:	16 96       	adiw	r26, 0x06	; 6
 884:	01 90       	ld	r0, Z+
 886:	0d 92       	st	X+, r0
 888:	2a 95       	dec	r18
 88a:	e1 f7       	brne	.-8      	; 0x884 <eth_send+0xa>
	enc28j60_send_packet((void*)frame, len +
 88c:	62 5f       	subi	r22, 0xF2	; 242
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	06 ce       	rjmp	.-1012   	; 0x49e <enc28j60_send_packet>

00000892 <eth_reply>:
}

// send Ethernet frame back
void eth_reply(eth_frame_t *frame, uint16_t len)
{
	memcpy(frame->to_addr, frame->from_addr, 6);
 892:	9c 01       	movw	r18, r24
 894:	2a 5f       	subi	r18, 0xFA	; 250
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	46 e0       	ldi	r20, 0x06	; 6
 89a:	f9 01       	movw	r30, r18
 89c:	dc 01       	movw	r26, r24
 89e:	01 90       	ld	r0, Z+
 8a0:	0d 92       	st	X+, r0
 8a2:	4a 95       	dec	r20
 8a4:	e1 f7       	brne	.-8      	; 0x89e <eth_reply+0xc>
	memcpy(frame->from_addr, mac_addr, 6);
 8a6:	46 e0       	ldi	r20, 0x06	; 6
 8a8:	e0 e6       	ldi	r30, 0x60	; 96
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	d9 01       	movw	r26, r18
 8ae:	01 90       	ld	r0, Z+
 8b0:	0d 92       	st	X+, r0
 8b2:	4a 95       	dec	r20
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <eth_reply+0x1c>
	enc28j60_send_packet((void*)frame, len +
 8b6:	62 5f       	subi	r22, 0xF2	; 242
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	f1 cd       	rjmp	.-1054   	; 0x49e <enc28j60_send_packet>

000008bc <ip_reply>:
}

// send IP packet back
// len is IP packet payload length
void ip_reply(eth_frame_t *frame, uint16_t len)
{
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	ec 01       	movw	r28, r24
 8c6:	8b 01       	movw	r16, r22
	ip_packet_t *packet = (void*)(frame->data);

	len += sizeof(ip_packet_t);
 8c8:	0c 5e       	subi	r16, 0xEC	; 236
 8ca:	1f 4f       	sbci	r17, 0xFF	; 255

	packet->total_len = htons(len);
 8cc:	90 2f       	mov	r25, r16
 8ce:	81 2f       	mov	r24, r17
 8d0:	99 8b       	std	Y+17, r25	; 0x11
 8d2:	88 8b       	std	Y+16, r24	; 0x10
	packet->fragment_id = 0;
 8d4:	1b 8a       	std	Y+19, r1	; 0x13
 8d6:	1a 8a       	std	Y+18, r1	; 0x12
	packet->flags_framgent_offset = 0;
 8d8:	1d 8a       	std	Y+21, r1	; 0x15
 8da:	1c 8a       	std	Y+20, r1	; 0x14
	packet->ttl = IP_PACKET_TTL;
 8dc:	80 e4       	ldi	r24, 0x40	; 64
 8de:	8e 8b       	std	Y+22, r24	; 0x16
	packet->cksum = 0;
 8e0:	19 8e       	std	Y+25, r1	; 0x19
 8e2:	18 8e       	std	Y+24, r1	; 0x18
	packet->to_addr = packet->from_addr;
 8e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
 8e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
 8e8:	ac 8d       	ldd	r26, Y+28	; 0x1c
 8ea:	bd 8d       	ldd	r27, Y+29	; 0x1d
 8ec:	8e 8f       	std	Y+30, r24	; 0x1e
 8ee:	9f 8f       	std	Y+31, r25	; 0x1f
 8f0:	a8 a3       	std	Y+32, r26	; 0x20
 8f2:	b9 a3       	std	Y+33, r27	; 0x21
	packet->from_addr = ip_addr;
 8f4:	40 ec       	ldi	r20, 0xC0	; 192
 8f6:	58 ea       	ldi	r21, 0xA8	; 168
 8f8:	64 e6       	ldi	r22, 0x64	; 100
 8fa:	7a e5       	ldi	r23, 0x5A	; 90
 8fc:	4a 8f       	std	Y+26, r20	; 0x1a
 8fe:	5b 8f       	std	Y+27, r21	; 0x1b
 900:	6c 8f       	std	Y+28, r22	; 0x1c
 902:	7d 8f       	std	Y+29, r23	; 0x1d

// send IP packet back
// len is IP packet payload length
void ip_reply(eth_frame_t *frame, uint16_t len)
{
	ip_packet_t *packet = (void*)(frame->data);
 904:	ae 01       	movw	r20, r28
 906:	42 5f       	subi	r20, 0xF2	; 242
 908:	5f 4f       	sbci	r21, 0xFF	; 255
	packet->flags_framgent_offset = 0;
	packet->ttl = IP_PACKET_TTL;
	packet->cksum = 0;
	packet->to_addr = packet->from_addr;
	packet->from_addr = ip_addr;
	packet->cksum = ip_cksum(0, (void*)packet, sizeof(ip_packet_t));
 90a:	24 e1       	ldi	r18, 0x14	; 20
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	cb 01       	movw	r24, r22
 914:	48 de       	rcall	.-880    	; 0x5a6 <ip_cksum>
 916:	99 8f       	std	Y+25, r25	; 0x19
 918:	88 8f       	std	Y+24, r24	; 0x18

	eth_reply((void*)frame, len);
 91a:	b8 01       	movw	r22, r16
 91c:	ce 01       	movw	r24, r28
}
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	1f 91       	pop	r17
 924:	0f 91       	pop	r16
	packet->cksum = 0;
	packet->to_addr = packet->from_addr;
	packet->from_addr = ip_addr;
	packet->cksum = ip_cksum(0, (void*)packet, sizeof(ip_packet_t));

	eth_reply((void*)frame, len);
 926:	b5 cf       	rjmp	.-150    	; 0x892 <eth_reply>

00000928 <arp_filter>:
	return 0;
}

// process arp packet
void arp_filter(eth_frame_t *frame, uint16_t len)
{
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
	arp_message_t *msg = (void*)(frame->data);

	if(len >= sizeof(arp_message_t))
 92c:	6c 31       	cpi	r22, 0x1C	; 28
 92e:	71 05       	cpc	r23, r1
 930:	30 f0       	brcs	.+12     	; 0x93e <arp_filter+0x16>
	{
		if( (msg->hw_type == ARP_HW_TYPE_ETH) &&
 932:	fc 01       	movw	r30, r24
 934:	26 85       	ldd	r18, Z+14	; 0x0e
 936:	37 85       	ldd	r19, Z+15	; 0x0f
 938:	21 15       	cp	r18, r1
 93a:	31 40       	sbci	r19, 0x01	; 1
 93c:	19 f0       	breq	.+6      	; 0x944 <arp_filter+0x1c>
				}
				break;
			}
		}
	}
}
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	08 95       	ret
{
	arp_message_t *msg = (void*)(frame->data);

	if(len >= sizeof(arp_message_t))
	{
		if( (msg->hw_type == ARP_HW_TYPE_ETH) &&
 944:	fc 01       	movw	r30, r24
 946:	20 89       	ldd	r18, Z+16	; 0x10
 948:	31 89       	ldd	r19, Z+17	; 0x11
 94a:	28 30       	cpi	r18, 0x08	; 8
 94c:	31 05       	cpc	r19, r1
 94e:	b9 f7       	brne	.-18     	; 0x93e <arp_filter+0x16>
			(msg->proto_type == ARP_PROTO_TYPE_IP) &&
 950:	46 a1       	ldd	r20, Z+38	; 0x26
 952:	57 a1       	ldd	r21, Z+39	; 0x27
 954:	60 a5       	ldd	r22, Z+40	; 0x28
 956:	71 a5       	ldd	r23, Z+41	; 0x29
 958:	40 3c       	cpi	r20, 0xC0	; 192
 95a:	f8 ea       	ldi	r31, 0xA8	; 168
 95c:	5f 07       	cpc	r21, r31
 95e:	f4 e6       	ldi	r31, 0x64	; 100
 960:	6f 07       	cpc	r22, r31
 962:	fa e5       	ldi	r31, 0x5A	; 90
 964:	7f 07       	cpc	r23, r31
 966:	59 f7       	brne	.-42     	; 0x93e <arp_filter+0x16>
			(msg->ip_addr_to == ip_addr) )
		{
			switch(msg->type)
 968:	fc 01       	movw	r30, r24
 96a:	24 89       	ldd	r18, Z+20	; 0x14
 96c:	35 89       	ldd	r19, Z+21	; 0x15
 96e:	21 15       	cp	r18, r1
 970:	f1 e0       	ldi	r31, 0x01	; 1
 972:	3f 07       	cpc	r19, r31
 974:	e1 f1       	breq	.+120    	; 0x9ee <arp_filter+0xc6>
 976:	21 15       	cp	r18, r1
 978:	32 40       	sbci	r19, 0x02	; 2
 97a:	09 f7       	brne	.-62     	; 0x93e <arp_filter+0x16>
				msg->ip_addr_to = msg->ip_addr_from;
				msg->ip_addr_from = ip_addr;
				eth_reply(frame, sizeof(arp_message_t));
				break;
			case ARP_TYPE_RESPONSE:
				if(!arp_search_cache(msg->ip_addr_from))
 97c:	fc 01       	movw	r30, r24
 97e:	44 8d       	ldd	r20, Z+28	; 0x1c
 980:	55 8d       	ldd	r21, Z+29	; 0x1d
 982:	66 8d       	ldd	r22, Z+30	; 0x1e
 984:	77 8d       	ldd	r23, Z+31	; 0x1f
uint8_t *arp_search_cache(uint32_t node_ip_addr)
{
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
 986:	00 91 6b 00 	lds	r16, 0x006B
 98a:	10 91 6c 00 	lds	r17, 0x006C
 98e:	20 91 6d 00 	lds	r18, 0x006D
 992:	30 91 6e 00 	lds	r19, 0x006E
 996:	40 17       	cp	r20, r16
 998:	51 07       	cpc	r21, r17
 99a:	62 07       	cpc	r22, r18
 99c:	73 07       	cpc	r23, r19
 99e:	09 f4       	brne	.+2      	; 0x9a2 <arp_filter+0x7a>
 9a0:	50 c0       	rjmp	.+160    	; 0xa42 <arp_filter+0x11a>
				eth_reply(frame, sizeof(arp_message_t));
				break;
			case ARP_TYPE_RESPONSE:
				if(!arp_search_cache(msg->ip_addr_from))
				{
					arp_cache[arp_cache_wr].ip_addr = msg->ip_addr_from;
 9a2:	10 91 75 00 	lds	r17, 0x0075
 9a6:	21 2f       	mov	r18, r17
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	d9 01       	movw	r26, r18
 9ac:	aa 0f       	add	r26, r26
 9ae:	bb 1f       	adc	r27, r27
 9b0:	aa 0f       	add	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	a2 0f       	add	r26, r18
 9b6:	b3 1f       	adc	r27, r19
 9b8:	aa 0f       	add	r26, r26
 9ba:	bb 1f       	adc	r27, r27
 9bc:	fd 01       	movw	r30, r26
 9be:	e5 59       	subi	r30, 0x95	; 149
 9c0:	ff 4f       	sbci	r31, 0xFF	; 255
 9c2:	40 83       	st	Z, r20
 9c4:	51 83       	std	Z+1, r21	; 0x01
 9c6:	62 83       	std	Z+2, r22	; 0x02
 9c8:	73 83       	std	Z+3, r23	; 0x03
					memcpy(arp_cache[arp_cache_wr].mac_addr, msg->mac_addr_from, 6);
 9ca:	a1 59       	subi	r26, 0x91	; 145
 9cc:	bf 4f       	sbci	r27, 0xFF	; 255
 9ce:	26 e0       	ldi	r18, 0x06	; 6
 9d0:	fc 01       	movw	r30, r24
 9d2:	76 96       	adiw	r30, 0x16	; 22
 9d4:	01 90       	ld	r0, Z+
 9d6:	0d 92       	st	X+, r0
 9d8:	2a 95       	dec	r18
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <arp_filter+0xac>
					arp_cache_wr++;
 9dc:	1f 5f       	subi	r17, 0xFF	; 255
 9de:	10 93 75 00 	sts	0x0075, r17
					if(arp_cache_wr == ARP_CACHE_SIZE)
 9e2:	11 30       	cpi	r17, 0x01	; 1
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <arp_filter+0xc0>
 9e6:	ab cf       	rjmp	.-170    	; 0x93e <arp_filter+0x16>
						arp_cache_wr = 0;
 9e8:	10 92 75 00 	sts	0x0075, r1
 9ec:	a8 cf       	rjmp	.-176    	; 0x93e <arp_filter+0x16>
			(msg->ip_addr_to == ip_addr) )
		{
			switch(msg->type)
			{
			case ARP_TYPE_REQUEST:
				msg->type = ARP_TYPE_RESPONSE;
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	32 e0       	ldi	r19, 0x02	; 2
 9f2:	fc 01       	movw	r30, r24
 9f4:	35 8b       	std	Z+21, r19	; 0x15
 9f6:	24 8b       	std	Z+20, r18	; 0x14
				memcpy(msg->mac_addr_to, msg->mac_addr_from, 6);
 9f8:	dc 01       	movw	r26, r24
 9fa:	90 96       	adiw	r26, 0x20	; 32
 9fc:	9c 01       	movw	r18, r24
 9fe:	2a 5e       	subi	r18, 0xEA	; 234
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	16 e0       	ldi	r17, 0x06	; 6
 a04:	f9 01       	movw	r30, r18
 a06:	01 90       	ld	r0, Z+
 a08:	0d 92       	st	X+, r0
 a0a:	1a 95       	dec	r17
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <arp_filter+0xde>
				memcpy(msg->mac_addr_from, mac_addr, 6);
 a0e:	16 e0       	ldi	r17, 0x06	; 6
 a10:	e0 e6       	ldi	r30, 0x60	; 96
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	d9 01       	movw	r26, r18
 a16:	01 90       	ld	r0, Z+
 a18:	0d 92       	st	X+, r0
 a1a:	1a 95       	dec	r17
 a1c:	e1 f7       	brne	.-8      	; 0xa16 <arp_filter+0xee>
				msg->ip_addr_to = msg->ip_addr_from;
 a1e:	fc 01       	movw	r30, r24
 a20:	04 8d       	ldd	r16, Z+28	; 0x1c
 a22:	15 8d       	ldd	r17, Z+29	; 0x1d
 a24:	26 8d       	ldd	r18, Z+30	; 0x1e
 a26:	37 8d       	ldd	r19, Z+31	; 0x1f
 a28:	06 a3       	std	Z+38, r16	; 0x26
 a2a:	17 a3       	std	Z+39, r17	; 0x27
 a2c:	20 a7       	std	Z+40, r18	; 0x28
 a2e:	31 a7       	std	Z+41, r19	; 0x29
				msg->ip_addr_from = ip_addr;
 a30:	44 8f       	std	Z+28, r20	; 0x1c
 a32:	55 8f       	std	Z+29, r21	; 0x1d
 a34:	66 8f       	std	Z+30, r22	; 0x1e
 a36:	77 8f       	std	Z+31, r23	; 0x1f
				eth_reply(frame, sizeof(arp_message_t));
 a38:	6c e1       	ldi	r22, 0x1C	; 28
 a3a:	70 e0       	ldi	r23, 0x00	; 0
				}
				break;
			}
		}
	}
}
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
				msg->type = ARP_TYPE_RESPONSE;
				memcpy(msg->mac_addr_to, msg->mac_addr_from, 6);
				memcpy(msg->mac_addr_from, mac_addr, 6);
				msg->ip_addr_to = msg->ip_addr_from;
				msg->ip_addr_from = ip_addr;
				eth_reply(frame, sizeof(arp_message_t));
 a40:	28 cf       	rjmp	.-432    	; 0x892 <eth_reply>
				break;
			case ARP_TYPE_RESPONSE:
				if(!arp_search_cache(msg->ip_addr_from))
 a42:	2f e6       	ldi	r18, 0x6F	; 111
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	23 2b       	or	r18, r19
 a48:	09 f0       	breq	.+2      	; 0xa4c <arp_filter+0x124>
 a4a:	79 cf       	rjmp	.-270    	; 0x93e <arp_filter+0x16>
 a4c:	aa cf       	rjmp	.-172    	; 0x9a2 <arp_filter+0x7a>

00000a4e <eth_filter>:
}

// process Ethernet frame
void eth_filter(eth_frame_t *frame, uint16_t len)
{
	if(len >= sizeof(eth_frame_t))
 a4e:	6e 30       	cpi	r22, 0x0E	; 14
 a50:	71 05       	cpc	r23, r1
 a52:	90 f0       	brcs	.+36     	; 0xa78 <eth_filter+0x2a>
	{
		switch(frame->type)
 a54:	fc 01       	movw	r30, r24
 a56:	24 85       	ldd	r18, Z+12	; 0x0c
 a58:	35 85       	ldd	r19, Z+13	; 0x0d
 a5a:	28 30       	cpi	r18, 0x08	; 8
 a5c:	31 05       	cpc	r19, r1
 a5e:	31 f0       	breq	.+12     	; 0xa6c <eth_filter+0x1e>
 a60:	28 30       	cpi	r18, 0x08	; 8
 a62:	36 40       	sbci	r19, 0x06	; 6
 a64:	49 f4       	brne	.+18     	; 0xa78 <eth_filter+0x2a>
		{
		case ETH_TYPE_ARP:
			arp_filter(frame, len - sizeof(eth_frame_t));
 a66:	6e 50       	subi	r22, 0x0E	; 14
 a68:	71 09       	sbc	r23, r1
 a6a:	5e cf       	rjmp	.-324    	; 0x928 <arp_filter>
	ip_packet_t *packet = (void*)(frame->data);

	//if(len >= sizeof(ip_packet_t))
	//{
		hcs = packet->cksum;
		packet->cksum = 0;
 a6c:	fc 01       	movw	r30, r24
 a6e:	11 8e       	std	Z+25, r1	; 0x19
 a70:	10 8e       	std	Z+24, r1	; 0x18

		if( (packet->ver_head_len == 0x45) &&
 a72:	26 85       	ldd	r18, Z+14	; 0x0e
 a74:	25 34       	cpi	r18, 0x45	; 69
 a76:	09 f0       	breq	.+2      	; 0xa7a <eth_filter+0x2c>
 a78:	08 95       	ret

// process IP packet
void ip_filter(eth_frame_t *frame, uint16_t len)
{
	uint16_t hcs;
	ip_packet_t *packet = (void*)(frame->data);
 a7a:	ac 01       	movw	r20, r24
 a7c:	42 5f       	subi	r20, 0xF2	; 242
 a7e:	5f 4f       	sbci	r21, 0xFF	; 255
	//{
		hcs = packet->cksum;
		packet->cksum = 0;

		if( (packet->ver_head_len == 0x45) &&
			(ip_cksum(0, (void*)packet, sizeof(ip_packet_t)) == hcs) &&
 a80:	24 e1       	ldi	r18, 0x14	; 20
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	70 e0       	ldi	r23, 0x00	; 0
 a88:	cb 01       	movw	r24, r22
 a8a:	8d cd       	rjmp	.-1254   	; 0x5a6 <ip_cksum>

00000a8c <lan_init>:
 * LAN
 */

void lan_init()
{
	enc28j60_init(mac_addr);
 a8c:	80 e6       	ldi	r24, 0x60	; 96
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	b1 cc       	rjmp	.-1694   	; 0x3f4 <enc28j60_init>

00000a92 <lan_poll>:
void lan_poll()
{
	uint16_t len;
	eth_frame_t *frame = (void*)net_buf;

	while((len = enc28j60_recv_packet(net_buf, sizeof(net_buf))))
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <lan_poll+0xa>
		eth_filter(frame, len);
 a94:	bc 01       	movw	r22, r24
 a96:	84 e8       	ldi	r24, 0x84	; 132
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	d9 df       	rcall	.-78     	; 0xa4e <eth_filter>
void lan_poll()
{
	uint16_t len;
	eth_frame_t *frame = (void*)net_buf;

	while((len = enc28j60_recv_packet(net_buf, sizeof(net_buf))))
 a9c:	60 e4       	ldi	r22, 0x40	; 64
 a9e:	70 e0       	ldi	r23, 0x00	; 0
 aa0:	84 e8       	ldi	r24, 0x84	; 132
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	2d dd       	rcall	.-1446   	; 0x500 <enc28j60_recv_packet>
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	a9 f7       	brne	.-22     	; 0xa94 <lan_poll+0x2>

#ifdef WITH_DHCP
	dhcp_poll();
#endif

}
 aaa:	08 95       	ret

00000aac <lan_up>:

uint8_t lan_up()
{
	return ip_addr != 0;
}
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	08 95       	ret

00000ab0 <readStatus>:
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e
	}; 

void readStatus()
{
	ctlKey = ! (CTLPIN & (1<<CTL_KEY_ON));
 ab0:	80 b3       	in	r24, 0x10	; 16
 ab2:	91 e0       	ldi	r25, 0x01	; 1
 ab4:	86 95       	lsr	r24
 ab6:	81 70       	andi	r24, 0x01	; 1
 ab8:	89 27       	eor	r24, r25
 aba:	80 93 78 00 	sts	0x0078, r24
	ctlButton = ! (CTLPIN & (1<<CTL_BUTTON));
 abe:	80 b3       	in	r24, 0x10	; 16
 ac0:	81 70       	andi	r24, 0x01	; 1
 ac2:	89 27       	eor	r24, r25
 ac4:	80 93 77 00 	sts	0x0077, r24
	linkActive = (enc28j60_read_phy(PHSTAT2) & PHSTAT2_LSTAT ? true : false);
 ac8:	81 e1       	ldi	r24, 0x11	; 17
 aca:	75 dc       	rcall	.-1814   	; 0x3b6 <enc28j60_read_phy>
 acc:	92 fb       	bst	r25, 2
 ace:	99 27       	eor	r25, r25
 ad0:	90 f9       	bld	r25, 0
 ad2:	90 93 76 00 	sts	0x0076, r25
	
	doSend = ctlButton || doSend;
 ad6:	80 91 77 00 	lds	r24, 0x0077
 ada:	81 11       	cpse	r24, r1
 adc:	0c c0       	rjmp	.+24     	; 0xaf6 <readStatus+0x46>
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	90 91 79 00 	lds	r25, 0x0079
 ae4:	99 23       	and	r25, r25
 ae6:	19 f0       	breq	.+6      	; 0xaee <readStatus+0x3e>
 ae8:	80 93 79 00 	sts	0x0079, r24
 aec:	08 95       	ret
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	80 93 79 00 	sts	0x0079, r24
 af4:	08 95       	ret
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	80 93 79 00 	sts	0x0079, r24
 afc:	08 95       	ret

00000afe <setLeds>:
}

void setLeds()
{
	//Clear all LEDs
	CTLPORT &= ~((1<<LED_BUTTON) | (1<<LED_KEY_OFF) | (1<<LED_KEY_ON));
 afe:	82 b3       	in	r24, 0x12	; 18
 b00:	87 7c       	andi	r24, 0xC7	; 199
 b02:	82 bb       	out	0x12, r24	; 18

	if ( ! doSend) {
 b04:	80 91 79 00 	lds	r24, 0x0079
 b08:	81 11       	cpse	r24, r1
 b0a:	01 c0       	rjmp	.+2      	; 0xb0e <setLeds+0x10>
		CTLPORT |= (1<<LED_STANDBY);
 b0c:	95 9a       	sbi	0x12, 5	; 18
	}

	if ( ! linkActive) {
 b0e:	80 91 76 00 	lds	r24, 0x0076
 b12:	81 11       	cpse	r24, r1
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <setLeds+0x1c>
		CTLPORT |= (1<<LED_STANDBY);
 b16:	95 9a       	sbi	0x12, 5	; 18
		CTLPORT |= (1<<LED_ALARM);
 b18:	93 9a       	sbi	0x12, 3	; 18
 b1a:	08 95       	ret

00000b1c <ledFlash>:
}


void ledFlash()
{
	CTLPORT |= (1<<LED_ALARM);
 b1c:	93 9a       	sbi	0x12, 3	; 18
 b1e:	2f e9       	ldi	r18, 0x9F	; 159
 b20:	86 e8       	ldi	r24, 0x86	; 134
 b22:	91 e0       	ldi	r25, 0x01	; 1
 b24:	21 50       	subi	r18, 0x01	; 1
 b26:	80 40       	sbci	r24, 0x00	; 0
 b28:	90 40       	sbci	r25, 0x00	; 0
 b2a:	e1 f7       	brne	.-8      	; 0xb24 <ledFlash+0x8>
 b2c:	00 c0       	rjmp	.+0      	; 0xb2e <ledFlash+0x12>
 b2e:	00 00       	nop
	_delay_ms(50);
	CTLPORT &= ~(1<<LED_ALARM);
 b30:	93 98       	cbi	0x12, 3	; 18
 b32:	08 95       	ret

00000b34 <main>:
}


int main()
{
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	dd 27       	eor	r29, r29
 b3c:	c6 50       	subi	r28, 0x06	; 6
 b3e:	cd bf       	out	0x3d, r28	; 61
 b40:	8f e4       	ldi	r24, 0x4F	; 79
 b42:	93 ec       	ldi	r25, 0xC3	; 195
 b44:	01 97       	sbiw	r24, 0x01	; 1
 b46:	f1 f7       	brne	.-4      	; 0xb44 <main+0x10>
 b48:	00 c0       	rjmp	.+0      	; 0xb4a <main+0x16>
 b4a:	00 00       	nop
	_delay_ms(20);

	DDRA |= (1<<PA0);
 b4c:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA |= (1<<PA0);
 b4e:	d8 9a       	sbi	0x1b, 0	; 27
	
	//Init control port
	//CTLDDR |= (1<<LED_BUTTON) | (1<<LED_KEY_OFF) | (1<<LED_KEY_ON);
	CTLDDR |= (1<<LED_STANDBY) | (1<<LED_ALARM);
 b50:	81 b3       	in	r24, 0x11	; 17
 b52:	88 62       	ori	r24, 0x28	; 40
 b54:	81 bb       	out	0x11, r24	; 17
	CTLDDR &= ~((1<<CTL_BUTTON) | (1<<CTL_KEY_ON));
 b56:	81 b3       	in	r24, 0x11	; 17
 b58:	8c 7f       	andi	r24, 0xFC	; 252
 b5a:	81 bb       	out	0x11, r24	; 17

    //Read packet size from EEPROM
    eeprom_busy_wait();
 b5c:	e1 99       	sbic	0x1c, 1	; 28
 b5e:	fe cf       	rjmp	.-4      	; 0xb5c <main+0x28>
    uint16_t ipsize = eeprom_read_word( (void *)0x11);
 b60:	81 e1       	ldi	r24, 0x11	; 17
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	5d d0       	rcall	.+186    	; 0xc20 <__eerd_word_tn2313>
    uint8_t pktsize = ipsize + 14; //IP packet size + Ethernet frame header size
 b66:	82 5f       	subi	r24, 0xF2	; 242
 b68:	81 34       	cpi	r24, 0x41	; 65
 b6a:	08 f0       	brcs	.+2      	; 0xb6e <main+0x3a>
 b6c:	80 e4       	ldi	r24, 0x40	; 64
	if (pktsize > MAX_BUFFER_SIZE) {
		pktsize = MAX_BUFFER_SIZE;
	}

    //Read packet from EEPROM
    eeprom_busy_wait();
 b6e:	e1 99       	sbic	0x1c, 1	; 28
 b70:	fe cf       	rjmp	.-4      	; 0xb6e <main+0x3a>
    eeprom_read_block(packetBuffer, (void*)0x00, pktsize);
 b72:	08 2f       	mov	r16, r24
 b74:	10 e0       	ldi	r17, 0x00	; 0
 b76:	a8 01       	movw	r20, r16
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	70 e0       	ldi	r23, 0x00	; 0
 b7c:	84 ec       	ldi	r24, 0xC4	; 196
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	40 d0       	rcall	.+128    	; 0xc02 <__eerd_block_tn2313>

	//Get src MAC from packet
	uint8_t mac_addr[6];
	memcpy(mac_addr, &packetBuffer[0x06], 6);
 b82:	86 e0       	ldi	r24, 0x06	; 6
 b84:	ea ec       	ldi	r30, 0xCA	; 202
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	de 01       	movw	r26, r28
 b8a:	11 96       	adiw	r26, 0x01	; 1
 b8c:	01 90       	ld	r0, Z+
 b8e:	0d 92       	st	X+, r0
 b90:	8a 95       	dec	r24
 b92:	e1 f7       	brne	.-8      	; 0xb8c <main+0x58>
	//sei();
	enc28j60_init(mac_addr);
 b94:	ce 01       	movw	r24, r28
 b96:	01 96       	adiw	r24, 0x01	; 1
 b98:	2d dc       	rcall	.-1958   	; 0x3f4 <enc28j60_init>
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <main+0x7a>
 b9c:	9f e3       	ldi	r25, 0x3F	; 63
 b9e:	2d e0       	ldi	r18, 0x0D	; 13
 ba0:	83 e0       	ldi	r24, 0x03	; 3
 ba2:	91 50       	subi	r25, 0x01	; 1
 ba4:	20 40       	sbci	r18, 0x00	; 0
 ba6:	80 40       	sbci	r24, 0x00	; 0
 ba8:	e1 f7       	brne	.-8      	; 0xba2 <main+0x6e>
 baa:	00 c0       	rjmp	.+0      	; 0xbac <main+0x78>
 bac:	00 00       	nop

	//counter_init();


	while(1) {
        readStatus();
 bae:	80 df       	rcall	.-256    	; 0xab0 <readStatus>
		setLeds();
 bb0:	a6 df       	rcall	.-180    	; 0xafe <setLeds>
		//uint16_t x = enc28j60_read_phy(PHSTAT2);
        if (linkActive && doSend) {
 bb2:	80 91 76 00 	lds	r24, 0x0076
 bb6:	88 23       	and	r24, r24
 bb8:	89 f3       	breq	.-30     	; 0xb9c <main+0x68>
 bba:	80 91 79 00 	lds	r24, 0x0079
 bbe:	88 23       	and	r24, r24
 bc0:	69 f3       	breq	.-38     	; 0xb9c <main+0x68>
            enc28j60_send_packet(packetBuffer, pktsize);
 bc2:	b8 01       	movw	r22, r16
 bc4:	84 ec       	ldi	r24, 0xC4	; 196
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	6a dc       	rcall	.-1836   	; 0x49e <enc28j60_send_packet>
}


void ledFlash()
{
	CTLPORT |= (1<<LED_ALARM);
 bca:	93 9a       	sbi	0x12, 3	; 18
 bcc:	9f e9       	ldi	r25, 0x9F	; 159
 bce:	26 e8       	ldi	r18, 0x86	; 134
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	20 40       	sbci	r18, 0x00	; 0
 bd6:	80 40       	sbci	r24, 0x00	; 0
 bd8:	e1 f7       	brne	.-8      	; 0xbd2 <main+0x9e>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <main+0xa8>
 bdc:	00 00       	nop
	_delay_ms(50);
	CTLPORT &= ~(1<<LED_ALARM);
 bde:	93 98       	cbi	0x12, 3	; 18
 be0:	9f ef       	ldi	r25, 0xFF	; 255
 be2:	24 e3       	ldi	r18, 0x34	; 52
 be4:	8c e0       	ldi	r24, 0x0C	; 12
 be6:	91 50       	subi	r25, 0x01	; 1
 be8:	20 40       	sbci	r18, 0x00	; 0
 bea:	80 40       	sbci	r24, 0x00	; 0
 bec:	e1 f7       	brne	.-8      	; 0xbe6 <main+0xb2>
 bee:	00 c0       	rjmp	.+0      	; 0xbf0 <main+0xbc>
 bf0:	00 00       	nop
 bf2:	d4 cf       	rjmp	.-88     	; 0xb9c <main+0x68>

00000bf4 <memset>:
 bf4:	dc 01       	movw	r26, r24
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <memset+0x6>
 bf8:	6d 93       	st	X+, r22
 bfa:	41 50       	subi	r20, 0x01	; 1
 bfc:	50 40       	sbci	r21, 0x00	; 0
 bfe:	e0 f7       	brcc	.-8      	; 0xbf8 <memset+0x4>
 c00:	08 95       	ret

00000c02 <__eerd_block_tn2313>:
 c02:	a8 2f       	mov	r26, r24
 c04:	86 2f       	mov	r24, r22

00000c06 <__eerd_blraw_tn2313>:
 c06:	e8 2f       	mov	r30, r24
 c08:	e1 99       	sbic	0x1c, 1	; 28
 c0a:	fe cf       	rjmp	.-4      	; 0xc08 <__eerd_blraw_tn2313+0x2>
 c0c:	1f ba       	out	0x1f, r1	; 31
 c0e:	05 c0       	rjmp	.+10     	; 0xc1a <__eerd_blraw_tn2313+0x14>
 c10:	ee bb       	out	0x1e, r30	; 30
 c12:	e0 9a       	sbi	0x1c, 0	; 28
 c14:	e3 95       	inc	r30
 c16:	0d b2       	in	r0, 0x1d	; 29
 c18:	0d 92       	st	X+, r0
 c1a:	41 50       	subi	r20, 0x01	; 1
 c1c:	c8 f7       	brcc	.-14     	; 0xc10 <__eerd_blraw_tn2313+0xa>
 c1e:	08 95       	ret

00000c20 <__eerd_word_tn2313>:
 c20:	a8 e1       	ldi	r26, 0x18	; 24
 c22:	42 e0       	ldi	r20, 0x02	; 2
 c24:	f0 cf       	rjmp	.-32     	; 0xc06 <__eerd_blraw_tn2313>

00000c26 <_exit>:
 c26:	f8 94       	cli

00000c28 <__stop_program>:
 c28:	ff cf       	rjmp	.-2      	; 0xc28 <__stop_program>
